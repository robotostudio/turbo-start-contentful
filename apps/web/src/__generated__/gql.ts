/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  fragment PageFields on Page {\n    sys {\n      id\n      firstPublishedAt\n      publishedAt\n    }\n    title\n    slug\n    description\n    seoTitle\n    seoDescription\n    seoNoIndex\n    image {\n      url\n      title\n      description\n      width\n      height\n    }\n    seoImage {\n      url\n      title\n      description\n      width\n      height\n    }\n    pageBuilderCollection {\n      items {\n        __typename\n        ... on Hero {\n          sys {\n            id\n          }\n          title\n          badge\n          image {\n            url\n            title\n            description\n            width\n            height\n          }\n          buttonsCollection {\n            items {\n              label\n              href\n              variant\n              internal {\n                slug\n                title\n              }\n            }\n          }\n        }\n        ... on CallToAction {\n          sys {\n            id\n          }\n          title\n          eyebrow\n          richText {\n            json\n          }\n          buttonsCollection {\n            items {\n              label\n              href\n              variant\n              internal {\n                slug\n                title\n              }\n            }\n          }\n        }\n        ... on FeatureCards {\n          sys {\n            id\n          }\n          title\n          eyebrow\n          richText {\n            json\n          }\n          cardsCollection {\n            items {\n              title\n              icon {\n                url\n                title\n                description\n                width\n                height\n              }\n              richText {\n                json\n              }\n            }\n          }\n        }\n        ... on FaqAccordion {\n          sys {\n            id\n          }\n          title\n          eyebrow\n          faqsCollection {\n            items {\n              question\n              answer {\n                json\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": typeof types.PageFieldsFragmentDoc,
    "\n  query GetPages($preview: Boolean) {\n    pageCollection(preview: $preview, limit: 100) {\n      total\n      skip\n      limit\n      items {\n        ...PageFields\n      }\n    }\n  }\n": typeof types.GetPagesDocument,
    "\n  query GetPageBySlug($slug: String!, $preview: Boolean) {\n    pageCollection(where: { slug: $slug }, limit: 1, preview: $preview) {\n      items {\n        ...PageFields\n      }\n    }\n  }\n": typeof types.GetPageBySlugDocument,
    "\n  query SearchContent($preview: Boolean) {\n    pageCollection(preview: $preview, limit: 20) {\n      total\n      items {\n        sys {\n          id\n          firstPublishedAt\n          publishedAt\n        }\n        title\n        description\n        slug\n        __typename\n      }\n    }\n  }\n": typeof types.SearchContentDocument,
    "\n  query GetHeroes($preview: Boolean) {\n    heroCollection(preview: $preview, limit: 100) {\n      total\n      skip\n      limit\n      items {\n        sys {\n          id\n          firstPublishedAt\n          publishedAt\n        }\n        title\n        badge\n        image {\n          url\n          title\n          description\n          width\n          height\n        }\n        buttonsCollection {\n          items {\n            label\n            href\n            variant\n            internal {\n              slug\n              title\n            }\n          }\n        }\n      }\n    }\n  }\n": typeof types.GetHeroesDocument,
    "\n  query GetCallToActions($preview: Boolean) {\n    callToActionCollection(preview: $preview, limit: 100) {\n      total\n      skip\n      limit\n      items {\n        sys {\n          id\n          firstPublishedAt\n          publishedAt\n        }\n        title\n        eyebrow\n        richText {\n          json\n        }\n        buttonsCollection {\n          items {\n            label\n            href\n            variant\n            internal {\n              slug\n              title\n            }\n          }\n        }\n      }\n    }\n  }\n": typeof types.GetCallToActionsDocument,
    "\n  query GetContentByType($contentType: String!, $preview: Boolean, $limit: Int, $skip: Int) {\n    collection: __type(name: $contentType) {\n      name\n    }\n  }\n": typeof types.GetContentByTypeDocument,
    "\n  query GetContentWithPagination($contentType: String!, $preview: Boolean, $limit: Int, $skip: Int) {\n    collection: __type(name: $contentType) {\n      name\n    }\n  }\n": typeof types.GetContentWithPaginationDocument,
};
const documents: Documents = {
    "\n  fragment PageFields on Page {\n    sys {\n      id\n      firstPublishedAt\n      publishedAt\n    }\n    title\n    slug\n    description\n    seoTitle\n    seoDescription\n    seoNoIndex\n    image {\n      url\n      title\n      description\n      width\n      height\n    }\n    seoImage {\n      url\n      title\n      description\n      width\n      height\n    }\n    pageBuilderCollection {\n      items {\n        __typename\n        ... on Hero {\n          sys {\n            id\n          }\n          title\n          badge\n          image {\n            url\n            title\n            description\n            width\n            height\n          }\n          buttonsCollection {\n            items {\n              label\n              href\n              variant\n              internal {\n                slug\n                title\n              }\n            }\n          }\n        }\n        ... on CallToAction {\n          sys {\n            id\n          }\n          title\n          eyebrow\n          richText {\n            json\n          }\n          buttonsCollection {\n            items {\n              label\n              href\n              variant\n              internal {\n                slug\n                title\n              }\n            }\n          }\n        }\n        ... on FeatureCards {\n          sys {\n            id\n          }\n          title\n          eyebrow\n          richText {\n            json\n          }\n          cardsCollection {\n            items {\n              title\n              icon {\n                url\n                title\n                description\n                width\n                height\n              }\n              richText {\n                json\n              }\n            }\n          }\n        }\n        ... on FaqAccordion {\n          sys {\n            id\n          }\n          title\n          eyebrow\n          faqsCollection {\n            items {\n              question\n              answer {\n                json\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n": types.PageFieldsFragmentDoc,
    "\n  query GetPages($preview: Boolean) {\n    pageCollection(preview: $preview, limit: 100) {\n      total\n      skip\n      limit\n      items {\n        ...PageFields\n      }\n    }\n  }\n": types.GetPagesDocument,
    "\n  query GetPageBySlug($slug: String!, $preview: Boolean) {\n    pageCollection(where: { slug: $slug }, limit: 1, preview: $preview) {\n      items {\n        ...PageFields\n      }\n    }\n  }\n": types.GetPageBySlugDocument,
    "\n  query SearchContent($preview: Boolean) {\n    pageCollection(preview: $preview, limit: 20) {\n      total\n      items {\n        sys {\n          id\n          firstPublishedAt\n          publishedAt\n        }\n        title\n        description\n        slug\n        __typename\n      }\n    }\n  }\n": types.SearchContentDocument,
    "\n  query GetHeroes($preview: Boolean) {\n    heroCollection(preview: $preview, limit: 100) {\n      total\n      skip\n      limit\n      items {\n        sys {\n          id\n          firstPublishedAt\n          publishedAt\n        }\n        title\n        badge\n        image {\n          url\n          title\n          description\n          width\n          height\n        }\n        buttonsCollection {\n          items {\n            label\n            href\n            variant\n            internal {\n              slug\n              title\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetHeroesDocument,
    "\n  query GetCallToActions($preview: Boolean) {\n    callToActionCollection(preview: $preview, limit: 100) {\n      total\n      skip\n      limit\n      items {\n        sys {\n          id\n          firstPublishedAt\n          publishedAt\n        }\n        title\n        eyebrow\n        richText {\n          json\n        }\n        buttonsCollection {\n          items {\n            label\n            href\n            variant\n            internal {\n              slug\n              title\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetCallToActionsDocument,
    "\n  query GetContentByType($contentType: String!, $preview: Boolean, $limit: Int, $skip: Int) {\n    collection: __type(name: $contentType) {\n      name\n    }\n  }\n": types.GetContentByTypeDocument,
    "\n  query GetContentWithPagination($contentType: String!, $preview: Boolean, $limit: Int, $skip: Int) {\n    collection: __type(name: $contentType) {\n      name\n    }\n  }\n": types.GetContentWithPaginationDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  fragment PageFields on Page {\n    sys {\n      id\n      firstPublishedAt\n      publishedAt\n    }\n    title\n    slug\n    description\n    seoTitle\n    seoDescription\n    seoNoIndex\n    image {\n      url\n      title\n      description\n      width\n      height\n    }\n    seoImage {\n      url\n      title\n      description\n      width\n      height\n    }\n    pageBuilderCollection {\n      items {\n        __typename\n        ... on Hero {\n          sys {\n            id\n          }\n          title\n          badge\n          image {\n            url\n            title\n            description\n            width\n            height\n          }\n          buttonsCollection {\n            items {\n              label\n              href\n              variant\n              internal {\n                slug\n                title\n              }\n            }\n          }\n        }\n        ... on CallToAction {\n          sys {\n            id\n          }\n          title\n          eyebrow\n          richText {\n            json\n          }\n          buttonsCollection {\n            items {\n              label\n              href\n              variant\n              internal {\n                slug\n                title\n              }\n            }\n          }\n        }\n        ... on FeatureCards {\n          sys {\n            id\n          }\n          title\n          eyebrow\n          richText {\n            json\n          }\n          cardsCollection {\n            items {\n              title\n              icon {\n                url\n                title\n                description\n                width\n                height\n              }\n              richText {\n                json\n              }\n            }\n          }\n        }\n        ... on FaqAccordion {\n          sys {\n            id\n          }\n          title\n          eyebrow\n          faqsCollection {\n            items {\n              question\n              answer {\n                json\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment PageFields on Page {\n    sys {\n      id\n      firstPublishedAt\n      publishedAt\n    }\n    title\n    slug\n    description\n    seoTitle\n    seoDescription\n    seoNoIndex\n    image {\n      url\n      title\n      description\n      width\n      height\n    }\n    seoImage {\n      url\n      title\n      description\n      width\n      height\n    }\n    pageBuilderCollection {\n      items {\n        __typename\n        ... on Hero {\n          sys {\n            id\n          }\n          title\n          badge\n          image {\n            url\n            title\n            description\n            width\n            height\n          }\n          buttonsCollection {\n            items {\n              label\n              href\n              variant\n              internal {\n                slug\n                title\n              }\n            }\n          }\n        }\n        ... on CallToAction {\n          sys {\n            id\n          }\n          title\n          eyebrow\n          richText {\n            json\n          }\n          buttonsCollection {\n            items {\n              label\n              href\n              variant\n              internal {\n                slug\n                title\n              }\n            }\n          }\n        }\n        ... on FeatureCards {\n          sys {\n            id\n          }\n          title\n          eyebrow\n          richText {\n            json\n          }\n          cardsCollection {\n            items {\n              title\n              icon {\n                url\n                title\n                description\n                width\n                height\n              }\n              richText {\n                json\n              }\n            }\n          }\n        }\n        ... on FaqAccordion {\n          sys {\n            id\n          }\n          title\n          eyebrow\n          faqsCollection {\n            items {\n              question\n              answer {\n                json\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetPages($preview: Boolean) {\n    pageCollection(preview: $preview, limit: 100) {\n      total\n      skip\n      limit\n      items {\n        ...PageFields\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetPages($preview: Boolean) {\n    pageCollection(preview: $preview, limit: 100) {\n      total\n      skip\n      limit\n      items {\n        ...PageFields\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetPageBySlug($slug: String!, $preview: Boolean) {\n    pageCollection(where: { slug: $slug }, limit: 1, preview: $preview) {\n      items {\n        ...PageFields\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetPageBySlug($slug: String!, $preview: Boolean) {\n    pageCollection(where: { slug: $slug }, limit: 1, preview: $preview) {\n      items {\n        ...PageFields\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query SearchContent($preview: Boolean) {\n    pageCollection(preview: $preview, limit: 20) {\n      total\n      items {\n        sys {\n          id\n          firstPublishedAt\n          publishedAt\n        }\n        title\n        description\n        slug\n        __typename\n      }\n    }\n  }\n"): (typeof documents)["\n  query SearchContent($preview: Boolean) {\n    pageCollection(preview: $preview, limit: 20) {\n      total\n      items {\n        sys {\n          id\n          firstPublishedAt\n          publishedAt\n        }\n        title\n        description\n        slug\n        __typename\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetHeroes($preview: Boolean) {\n    heroCollection(preview: $preview, limit: 100) {\n      total\n      skip\n      limit\n      items {\n        sys {\n          id\n          firstPublishedAt\n          publishedAt\n        }\n        title\n        badge\n        image {\n          url\n          title\n          description\n          width\n          height\n        }\n        buttonsCollection {\n          items {\n            label\n            href\n            variant\n            internal {\n              slug\n              title\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetHeroes($preview: Boolean) {\n    heroCollection(preview: $preview, limit: 100) {\n      total\n      skip\n      limit\n      items {\n        sys {\n          id\n          firstPublishedAt\n          publishedAt\n        }\n        title\n        badge\n        image {\n          url\n          title\n          description\n          width\n          height\n        }\n        buttonsCollection {\n          items {\n            label\n            href\n            variant\n            internal {\n              slug\n              title\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetCallToActions($preview: Boolean) {\n    callToActionCollection(preview: $preview, limit: 100) {\n      total\n      skip\n      limit\n      items {\n        sys {\n          id\n          firstPublishedAt\n          publishedAt\n        }\n        title\n        eyebrow\n        richText {\n          json\n        }\n        buttonsCollection {\n          items {\n            label\n            href\n            variant\n            internal {\n              slug\n              title\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetCallToActions($preview: Boolean) {\n    callToActionCollection(preview: $preview, limit: 100) {\n      total\n      skip\n      limit\n      items {\n        sys {\n          id\n          firstPublishedAt\n          publishedAt\n        }\n        title\n        eyebrow\n        richText {\n          json\n        }\n        buttonsCollection {\n          items {\n            label\n            href\n            variant\n            internal {\n              slug\n              title\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetContentByType($contentType: String!, $preview: Boolean, $limit: Int, $skip: Int) {\n    collection: __type(name: $contentType) {\n      name\n    }\n  }\n"): (typeof documents)["\n  query GetContentByType($contentType: String!, $preview: Boolean, $limit: Int, $skip: Int) {\n    collection: __type(name: $contentType) {\n      name\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetContentWithPagination($contentType: String!, $preview: Boolean, $limit: Int, $skip: Int) {\n    collection: __type(name: $contentType) {\n      name\n    }\n  }\n"): (typeof documents)["\n  query GetContentWithPagination($contentType: String!, $preview: Boolean, $limit: Int, $skip: Int) {\n    collection: __type(name: $contentType) {\n      name\n    }\n  }\n"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;